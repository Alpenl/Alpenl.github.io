import{_ as e,D as o,B as t,ah as a}from"./chunks/framework.kYnPRA0Y.js";const m=JSON.parse('{"title":"正确重载运算符","description":"","frontmatter":{},"headers":[],"relativePath":"notes/Python基础/13正确重载运算符.md","filePath":"notes/Python基础/13正确重载运算符.md","lastUpdated":1738327344000}'),c={name:"notes/Python基础/13正确重载运算符.md"},n=a('<h1 id="正确重载运算符" tabindex="-1">正确重载运算符 <a class="header-anchor" href="#正确重载运算符" aria-label="Permalink to &quot;正确重载运算符&quot;">​</a></h1><blockquote><p>此笔记记录于《流畅的 python》，大部分为其中的摘要，少部分为笔者自己的理解；笔记为 jupyter 转的 markdown，原始版 jupyter 笔记在<a href="https://github.com/Justin3go/fluent-python-note" target="_blank" rel="noreferrer">这个仓库</a></p></blockquote><blockquote><p>有些事情让我不安，比如运算符重载。我决定不支持运算符重载，这完全是个人选择，因为我见过太多 C++程序员滥用它。</p></blockquote><h2 id="运算符重载基础" tabindex="-1">运算符重载基础 <a class="header-anchor" href="#运算符重载基础" aria-label="Permalink to &quot;运算符重载基础&quot;">​</a></h2><p>在某些圈子中，运算符重载的名声并不好。这个语言特性可能（已经）被滥用，让程序员困惑，导致缺陷和意料之外的性能瓶颈。但是，如果使用得当，API 会变得好用，代码会变得易于阅读。Python 施加了一些限制，做好了灵活性、可用性和安全性方面的平衡：</p><ul><li>不能重载内置类型的运算符</li><li>不能创建新的运算符，只能重载现有的</li><li>某些运算符不能重载，比如<code>is</code>、<code>and</code>、<code>or</code>和<code>not</code>（不过，<code>&amp;</code>、<code>|</code>和<code>~</code>可以重载）</li></ul><p>略略略，暂时不管,,,</p>',7),r=[n];function d(_,l,s,i,h,p){return t(),o("div",null,r)}const f=e(c,[["render",d]]);export{m as __pageData,f as default};
