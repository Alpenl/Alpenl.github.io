import{_ as s,D as t,B as i,ah as a}from"./chunks/framework.kYnPRA0Y.js";const E=JSON.parse('{"title":"动态属性和特性","description":"","frontmatter":{},"headers":[],"relativePath":"notes/Python基础/19元编程.md","filePath":"notes/Python基础/19元编程.md","lastUpdated":1738327344000}'),e={name:"notes/Python基础/19元编程.md"},n=a(`<h1 id="动态属性和特性" tabindex="-1">动态属性和特性 <a class="header-anchor" href="#动态属性和特性" aria-label="Permalink to &quot;动态属性和特性&quot;">​</a></h1><blockquote><p>此笔记记录于《流畅的 python》，大部分为其中的摘要，少部分为笔者自己的理解；笔记为 jupyter 转的 markdown，原始版 jupyter 笔记在<a href="https://github.com/Justin3go/fluent-python-note" target="_blank" rel="noreferrer">这个仓库</a></p></blockquote><p>关于元编程的一些解释：</p><p>Python 中的元编程是指在运行时创建或自定义代码的技术。这涉及到使用 Python 的反射特性和动态性质来编写程序，这些程序可以操纵、生成或修改自身或其他程序的代码。元编程常用于框架开发、代码生成、动态修改类或函数等场景。</p><p>Python 中实现元编程的几种方式包括但不限于：</p><ul><li>使用装饰器<code>（Decorators）</code>：装饰器可以修改或增强函数、方法或类的行为，而不需要改变其代码。</li><li>使用元类<code>（Metaclasses）</code>：元类是创建类的“类”。通过自定义元类，可以控制类的创建过程，从而实现复杂的行为。</li><li>使用<code>exec()</code>和<code>eval()</code>函数：这些函数可以执行存储在字符串或编译对象中的 Python 代码。</li><li>使用<code>getattr()</code>, <code>setattr()</code>, <code>delattr()</code>函数：这些函数可以用来动态地操作对象的属性。</li></ul><p>得多写一些 python 代码再来看这部分章节</p><h2 id="动态特性或属性" tabindex="-1">动态特性或属性 <a class="header-anchor" href="#动态特性或属性" aria-label="Permalink to &quot;动态特性或属性&quot;">​</a></h2><table><thead><tr><th>动态特性或属性</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><strong>动态创建类</strong></td><td>使用<code>type</code>函数或自定义元类来动态创建类。</td><td><code>MyClass = type(&#39;MyClass&#39;, (BaseClass,), {&#39;attr&#39;: value})</code></td></tr><tr><td><strong>装饰器</strong></td><td>函数装饰器和类装饰器用于在不修改原有代码的情况下增加额外功能。</td><td><code>@decorator</code><br><code>def function(): pass</code></td></tr><tr><td><strong>元类</strong></td><td>类的类，可以控制类的创建过程。</td><td><code>class Meta(type): pass</code><br><code>class MyClass(metaclass=Meta): pass</code></td></tr><tr><td><strong>exec() 和 eval()</strong></td><td>执行和评估字符串形式的 Python 代码。</td><td><code>exec(&#39;print(&quot;Hello World&quot;)&#39;)</code></td></tr><tr><td><strong>getattr(), setattr(), delattr()</strong></td><td>动态地获取、设置或删除对象的属性。</td><td><code>getattr(obj, &#39;attr&#39;)</code></td></tr><tr><td><strong><strong>getattr</strong>, <strong>setattr</strong>, <strong>delattr</strong></strong></td><td>特殊方法，允许自定义属性访问、设置或删除的行为。</td><td><code>def __getattr__(self, name): pass</code></td></tr><tr><td><strong>globals() 和 locals()</strong></td><td>分别返回当前全局和局部符号表的字典，允许动态访问变量。</td><td><code>globals()[&#39;variable_name&#39;] = value</code></td></tr><tr><td><strong>动态导入</strong></td><td>使用<code>importlib</code>模块动态导入模块。</td><td><code>importlib.import_module(&#39;module_name&#39;)</code></td></tr><tr><td><strong><strong>import</strong>()</strong></td><td>内置函数，用于动态导入模块。</td><td><code>__import__(&#39;module_name&#39;)</code></td></tr><tr><td><strong><strong>new</strong>()</strong></td><td>特殊方法，用于在类实例化时创建新实例。它是在__init__()之前调用的。</td><td><code>class MyClass(object):</code><br>  <code>def __new__(cls, *args, **kwargs):</code><br>    <code>instance = super(MyClass, cls).__new__(cls)</code><br>    <code># 初始化操作</code><br>    <code>return instance</code></td></tr></tbody></table><h2 id="属性描述符" tabindex="-1">属性描述符 <a class="header-anchor" href="#属性描述符" aria-label="Permalink to &quot;属性描述符&quot;">​</a></h2><p>属性描述符是实现了特定协议的类，该协议包括<code>__get__()</code>, <code>__set__()</code>和<code>__delete__()</code>方法中的至少一个。描述符使你能够创建一个对象，当它被附加到另一个对象的属性时，可以控制对该属性的访问、修改或删除操作。描述符是实现属性和方法装饰器背后的机制。</p><p>描述符的类型</p><table><thead><tr><th>类型</th><th>描述</th><th>必须实现的方法</th></tr></thead><tbody><tr><td><strong>数据描述符</strong></td><td>同时定义了<code>__get__()</code>和<code>__set__()</code>方法的描述符。数据描述符具有比实例字典更高的优先级。</td><td><code>__get__(), __set__()</code></td></tr><tr><td><strong>非数据描述符</strong></td><td>只定义了<code>__get__()</code>方法的描述符。如果一个实例的字典中有与非数据描述符同名的项，则该项的值会覆盖非数据描述符的值。</td><td><code>__get__()</code></td></tr></tbody></table><p>描述符的方法</p><ul><li><strong><code>__get__(self, instance, owner)</code></strong>：用于访问属性。它返回属性的值或者在访问时触发的任何动作。</li><li><strong><code>__set__(self, instance, value)</code></strong>：将在属性分配操作中调用，允许你定义设置属性值时的行为。</li><li><strong><code>__delete__(self, instance)</code></strong>：允许你定义删除属性时的行为。</li></ul><p>示例</p><p>下面是一个简单的数据描述符示例，它用于类型检查：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TypedProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, name, expected_type):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.expected_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expected_type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __get__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, instance, owner):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instance.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__dict__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __set__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, instance, value):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isinstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.expected_type):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            raise</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Value must be of type </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.expected_type</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        instance.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__dict__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TypedProperty(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TypedProperty(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyClass()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;John&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 正确</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 正确</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># obj.age = &quot;thirty&quot;  # 将抛出 TypeError</span></span></code></pre></div><p>在这个例子中，<code>TypedProperty</code>是一个数据描述符，因为它同时定义了<code>__get__()</code>和<code>__set__()</code>方法。它被用来确保<code>MyClass</code>的<code>name</code>属性是字符串类型，<code>age</code>属性是整数类型。</p>`,19),l=[n];function d(h,p,k,r,o,c){return i(),t("div",null,l)}const _=s(e,[["render",d]]);export{E as __pageData,_ as default};
