import{_ as e,c as T,as as l,j as a,o as Q}from"./chunks/framework.CsiIftoR.js";const g=JSON.parse('{"title":"关系数据库","description":"","frontmatter":{},"headers":[],"relativePath":"notes/数据库01/02关系数据库.md","filePath":"notes/数据库01/02关系数据库.md","lastUpdated":1738327344000}'),i={name:"notes/数据库01/02关系数据库.md"},o={tabindex:"0",class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},d={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"60.2ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 26608.5 1000","aria-hidden":"true"};function s(n,t,r,m,h,p){return Q(),T("div",null,[t[2]||(t[2]=l('<h1 id="关系数据库" tabindex="-1">关系数据库 <a class="header-anchor" href="#关系数据库" aria-label="Permalink to &quot;关系数据库&quot;">​</a></h1><h2 id="关系" tabindex="-1">关系 <a class="header-anchor" href="#关系" aria-label="Permalink to &quot;关系&quot;">​</a></h2><h3 id="域" tabindex="-1">域 <a class="header-anchor" href="#域" aria-label="Permalink to &quot;域&quot;">​</a></h3><p>域是一组具有<strong>相同数据类型</strong>的值的集合。</p><ul><li>如：学历：<code>{小学，初中，高中...}</code></li><li>年龄：大于 0 小于 150 的整数</li></ul><h3 id="笛卡尔积" tabindex="-1">笛卡尔积 <a class="header-anchor" href="#笛卡尔积" aria-label="Permalink to &quot;笛卡尔积&quot;">​</a></h3><ul><li>给定一组域 D1,D2,...Dn，这些域可以是相同的，也可完全不同，则 D1,D2,...Dn 的笛卡尔积为：</li></ul>',7)),a("mjx-container",o,[(Q(),T("svg",d,t[0]||(t[0]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(1486.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(2487,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(861,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(3751.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(4529.6,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(4974.2,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(5418.9,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(5863.6,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(6641.6,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(8254.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(9310.4,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(9810.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(10199.4,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(11155.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(11600.6,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(553,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(12557.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(13001.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(13446.5,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(13891.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(14335.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(14780.5,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(15807.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(16196.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(16474.7,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(16994.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(17617.5,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(18562.3,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(861,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(19717.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(20161.9,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(20784.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(21840.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(22340.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mn" transform="translate(22785.1,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(23285.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(23729.8,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(24174.5,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(24619.1,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(25063.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(25508.5,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(26108.5,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z" style="stroke-width:3;"></path></g></g></g>',1)]))),t[1]||(t[1]=a("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("msub",null,[a("mi",null,"D"),a("mn",null,"1")]),a("mo",null,"×"),a("msub",null,[a("mi",null,"D"),a("mn",null,"2")]),a("mo",null,"×"),a("mo",null,"."),a("mo",null,"."),a("mo",null,"."),a("mo",null,"×"),a("msub",null,[a("mi",null,"D"),a("mi",null,"n")]),a("mo",null,"="),a("mo",{fence:"false",stretchy:"false"},"{"),a("mo",{stretchy:"false"},"("),a("msub",null,[a("mi",null,"d"),a("mn",null,"1")]),a("mo",null,","),a("msub",null,[a("mi",null,"d"),a("mn",null,"2")]),a("mo",null,","),a("mo",null,"."),a("mo",null,"."),a("mo",null,"."),a("mo",null,","),a("msub",null,[a("mi",null,"d"),a("mi",null,"n")]),a("mo",{stretchy:"false"},")"),a("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),a("mi",null,"d"),a("mi",null,"i"),a("mo",null,"∈"),a("msub",null,[a("mi",null,"D"),a("mi",null,"i")]),a("mo",null,","),a("mi",null,"i"),a("mo",null,"="),a("mn",null,"1"),a("mo",null,","),a("mn",null,"2"),a("mo",null,","),a("mo",null,"."),a("mo",null,"."),a("mo",null,"."),a("mo",null,","),a("mi",null,"n"),a("mo",{fence:"false",stretchy:"false"},"}")])],-1))]),t[3]||(t[3]=l('<ul><li>所有域的所有取值的一个组合</li><li>不能重复</li><li>笛卡尔积的表示方法：笛卡尔积可表示为一张二维表，表中的每行对应笛卡尔积的一个袁术，表中的每列对应一个域。</li></ul><p>例子：</p><p>域<code>D1 = {1,2,3}</code>，域<code>D2 = {A,B}</code>，求 D1 与 D2 的笛卡尔积：</p><p>D1 x D2 = <code>{(1,A),(1,B),(2,A),(2,B),(3,A),(3,B)}</code></p><ul><li>元组：笛卡尔积中每一个元素(d1, d2, ..., dn)叫做一个元组，如果它包括 n 个值，就叫 n 元组或简称为元组，如上述中的(1,A)，(1,B)；</li><li>分量：笛卡尔积元素(d1,d2,...,dn)中的每一个值 di 叫做一个分量，如例题中 1，A，B 都是分量</li><li>基数：若 Di(i = 1,2,...,n)为有限集，其基数为 mi(i=1,2,...,n)，则 D1 x D2 x ... x Dn 的基数 M 为：M = m1 x m2 x ... x mn，上述例子中的 D1 与 D2 的笛卡尔积的基数就是 3x2=6</li><li>笛卡尔积不满足交换律</li></ul><h3 id="关系-1" tabindex="-1">关系 <a class="header-anchor" href="#关系-1" aria-label="Permalink to &quot;关系&quot;">​</a></h3><ul><li><p>笛卡尔积 D1 x D2 x ... Dn 的子集叫做在域 D1,D2,...Dn 上的关系，表示为 R(D1,D2,...Dn)</p></li><li><p>这里的 R 表示关系的名字，n 是关系的目或者度</p></li><li><p>一般来说，D1、D2、...、Dn 的笛卡尔积是没有实际意义的，从中取出右实际意义的元组才能构成关系。</p></li><li><p>关系是笛卡尔积的有限子集，无限关系在数据库系统中是无意义的</p></li><li><p>关系是笛卡尔积的子集，所以关系也是一个二维表，表的每行对应一个元组，表的每列对应一个域。由于域可以相同。为了加以区分，必须对每列取一个名字，称为属性。</p></li><li><p>笛卡尔积不满足交换律，但关系满足交换律，这是因为每个列的属性名可以取消元组的有序性</p></li><li><p>候选码：能够唯一标识关系中一个元组的某一属性组，称为候选码</p></li><li><p>候选码所包含的属性可能是一个属性，也可能是多个属性，在最极端的情况下，关系的所有属性才能称为候选码，称为全码。</p></li><li><p>一个关系的候选码可能不只一个，如果有多个候选码，选定其中一个作为主码</p></li><li><p>候选码的诸属性称为主属性，不存在任何候选码中的属性称为非主属性。</p></li></ul><h3 id="关系的性质" tabindex="-1">关系的性质 <a class="header-anchor" href="#关系的性质" aria-label="Permalink to &quot;关系的性质&quot;">​</a></h3><ul><li>关系中的每个属性是不可分解的，就是之前提到的不能表中有表，这个性质也是关系模型对关系最基本的要求。</li><li>表中各列取自同一个域</li><li>不同的列可以来自同一个域</li><li>列的次序可以任意交换，不改变关系的实际意义，这是因为属性名取消了关系元组的有序性</li><li>表中不允许出现完全相同的两行</li><li>行的次序无关紧要，可以任意交换，不会改变关系的意义</li></ul><h2 id="关系模式" tabindex="-1">关系模式 <a class="header-anchor" href="#关系模式" aria-label="Permalink to &quot;关系模式&quot;">​</a></h2><h3 id="型和值" tabindex="-1">型和值 <a class="header-anchor" href="#型和值" aria-label="Permalink to &quot;型和值&quot;">​</a></h3><ul><li>关系模式是型</li><li>关系是值</li><li>关系模式是对关系的描述 <ul><li>元组集合的结构： <ul><li>属性构成</li><li>属性来自的域</li><li>属性域域之间的映像关系</li></ul></li><li>元组语义以及完整性约束条件</li><li>属性间的数据以来关系集合</li></ul></li><li>关系模式是静态的</li><li>关系是动态的</li></ul><h3 id="关系模式-1" tabindex="-1">关系模式 <a class="header-anchor" href="#关系模式-1" aria-label="Permalink to &quot;关系模式&quot;">​</a></h3><ul><li>关系模式可以形式化地表示为：R(U, D, DOM, F)</li><li>R 为关系名</li><li>U 为组成该关系地属性名集合</li><li>D 为属性组 U 中属性所来自地域</li><li>DOM 为属性向域的映像集合</li><li>F 为属性间数据的依赖关系集合</li><li>关系模式可以简化为二元组 R(U)或者 R(A1, A2, ... , An)</li></ul><h2 id="关系数据库-1" tabindex="-1">关系数据库 <a class="header-anchor" href="#关系数据库-1" aria-label="Permalink to &quot;关系数据库&quot;">​</a></h2><h3 id="关系数据库-2" tabindex="-1">关系数据库 <a class="header-anchor" href="#关系数据库-2" aria-label="Permalink to &quot;关系数据库&quot;">​</a></h3><ul><li>关系数据库是基于关系模型的数据库</li><li>在关系模型中，实体及实体间的联系都是用关系来表示。</li><li>在一个给定的现实世界应用领域中，所有实体及实体之间联系所形成的集合就构成了一个关系数据库</li><li>关系数据库的型：数据库的描述。它包含若干域的定义以及在这些域上定义的若干关系模式。</li><li>关系数据库的值：这些关系模式在某一时刻对应的关系集合</li><li>在数据库中，关系模式是型，关系是值，二者通常统称为关系数据库</li></ul><h3 id="关系数据操作" tabindex="-1">关系数据操作 <a class="header-anchor" href="#关系数据操作" aria-label="Permalink to &quot;关系数据操作&quot;">​</a></h3><ul><li>常用的关系操作： <ul><li>查询操作：选择、投影、连接、除、并、差、交、笛卡尔积；<strong>其中选择、投影、并、差、笛卡尔积是五种基本操作</strong></li><li>数据更新”插入、删除、修改</li></ul></li><li>关系操作的特点：集合操作方式：操作的对象和结果都是集合，一次一集合的方式</li></ul><h3 id="实体完整性" tabindex="-1">实体完整性 <a class="header-anchor" href="#实体完整性" aria-label="Permalink to &quot;实体完整性&quot;">​</a></h3><ul><li>实体完整性规则：若属性 A 是基本关系 R 的主属性，则 A 不能取空置，这里的主属性是指候选码中包含的所有属性</li><li>空值就是“不知道”或“不存在”或“无意义”的值</li></ul><p>关系模型必须遵守实体完整性规则的原因：</p><ul><li>实体完整性规则是针对基本关系而言的。一个基本表通常对应现实世界的一个实体集或多对多联系。</li><li>现实世界中的实体和实体间的联系都是可区分的，即它们具有某种唯一性标识</li><li>相应的，关系模型中以主码作为唯一性标识</li><li>主码中的属性即主属性不能取空值</li></ul><h3 id="参照完整性" tabindex="-1">参照完整性 <a class="header-anchor" href="#参照完整性" aria-label="Permalink to &quot;参照完整性&quot;">​</a></h3><h4 id="关系的引用" tabindex="-1">关系的引用 <a class="header-anchor" href="#关系的引用" aria-label="Permalink to &quot;关系的引用&quot;">​</a></h4><ul><li>在关系模型中实体及实体间的联系都是用关系来描述的，自然存在着关系与关系间的引用</li><li>商品关系中引用了供应商关系的主码“供应商编码”</li><li>销售关系中引用了学生关系的主码“学号”和商品关系的主码“商品编码”</li></ul><h4 id="外码" tabindex="-1">外码 <a class="header-anchor" href="#外码" aria-label="Permalink to &quot;外码&quot;">​</a></h4><ul><li>定义：设 F 是基本关系 R 的一个或一组属性，但不是关系 R 的码，K 是基本关系 S 的主码。如果 F 与 K 相对应，则称 F 是 R 的外码，并称基本关系 R 为参照关系，基本关系 S 为被参照关系或目标关系。</li></ul><p>一些理解</p><ul><li>外码必须是本关系的一个或一组属性</li><li>外码不是本关系的码</li><li>外码与另一个关系（可能是同一关系）的主码相对应</li></ul><p>说明：</p><ul><li>关系 R 和 S 不一定是不同的关系</li><li>目标关系 S 的主码 K 和参照关系的外码 F 必须定义在同一个（或一组）域上</li><li>外码并不一定要与相应的主码同名</li><li>当外码与相应的主码属于不同关系时，往往取相同的名字，以便于识别</li></ul><h4 id="参照完整性规则" tabindex="-1">参照完整性规则 <a class="header-anchor" href="#参照完整性规则" aria-label="Permalink to &quot;参照完整性规则&quot;">​</a></h4><p>参照完整性规则：若属性（或属性组）F 是基本关系 R 的外码，它与基本关系 S 的主码 K 相对应（基本关系 R 和 S）不一定是不同的关系，则对于 R 中每个元组在 F 上的取值必须为：</p><ul><li>或者取空值（F 的每个属性值均为空值）</li><li>或者等于 S 中每个元组的主码值</li></ul><h2 id="用户定义的完整性" tabindex="-1">用户定义的完整性 <a class="header-anchor" href="#用户定义的完整性" aria-label="Permalink to &quot;用户定义的完整性&quot;">​</a></h2><p>用户定义的完整性：针对某一具体应用环境，给出关系数据库的约束条件，这些约束条件就是反映某一具体应用所设计的数据必须满足的语义要求</p><p>用户定义的完整性约束主要包括：</p><ul><li>唯一值约束（UNIQUE）</li><li>非空值约束（NOT NULL）</li><li>检查约束（CHECK）</li><li>缺省值约束（DEFAULT）</li></ul><h2 id="传统集合运算" tabindex="-1">传统集合运算 <a class="header-anchor" href="#传统集合运算" aria-label="Permalink to &quot;传统集合运算&quot;">​</a></h2><p>假设 R 和 S 都是关系，具有相同的目 n，且相应地属性取自同一个域</p><ul><li>并：是由属于 R 或属于 S 的元组组成</li><li>交：是由既属于 R 又属于 S 的元组组成</li><li>差：是由属于 R 但不属于 S 的元组组成</li></ul><p>广义笛卡尔积：如果 R 和 S 都是关系，分别是 n 目和 m 目，则 R 和 S 的广义笛卡尔积是一个（n+m）列的元组的集合。元组的前 n 列是关系 R 的一个元组，后 m 列是关系 S 的一个元组。如果 R 有 k1 个元组，S 有 k2 个元组，则关系 R 和关系 S 的广义笛卡尔积有 k1xk2 个元组。</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020230112165458.png" alt=""></p><h2 id="专门的关系运算" tabindex="-1">专门的关系运算 <a class="header-anchor" href="#专门的关系运算" aria-label="Permalink to &quot;专门的关系运算&quot;">​</a></h2><ul><li>选择运算：行的角度</li><li>投影运算：从 R 中选择出若干属性列组成新的关系，列的角度，投影之后不仅取消了原关系中的某些列，而且还可能取消某些元组（避免重复行）</li><li>连接运算 <ul><li>theta 连接：从行的角度进行运算，连接结果的列是参加原酸的关系的列的组合 <img src="https://oss.justin3go.com/blogs/Pasted%20image%2020230112170031.png" alt=""><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020230112170052.png" alt=""><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020230112170104.png" alt=""><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020230112170200.png" alt=""></li><li>等值连接：当 theta 取“=”时</li><li>自然连接：特殊的等值连接，要求两个关系中进行比较运算的分量必须时相同的属性组，并且在结果中把重复的属性列去掉</li></ul></li><li>除运算【略】</li></ul>',46))])}const c=e(i,[["render",s]]);export{g as __pageData,c as default};
