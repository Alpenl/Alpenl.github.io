import{_ as s,D as i,B as a,ah as e}from"./chunks/framework.kYnPRA0Y.js";const E=JSON.parse('{"title":"变换、坐标系和场景图","description":"","frontmatter":{},"headers":[],"relativePath":"notes/threejs入门/04变换、坐标系和场景图.md","filePath":"notes/threejs入门/04变换、坐标系和场景图.md","lastUpdated":1738327344000}'),n={name:"notes/threejs入门/04变换、坐标系和场景图.md"},t=e(`<h1 id="变换、坐标系和场景图" tabindex="-1">变换、坐标系和场景图 <a class="header-anchor" href="#变换、坐标系和场景图" aria-label="Permalink to &quot;变换、坐标系和场景图&quot;">​</a></h1><blockquote><p>此笔记记录于<a href="https://discoverthreejs.com/" target="_blank" rel="noreferrer">DISCOVER three.js</a>，大多数为其中的摘要，少数为笔者自己的理解</p></blockquote><h2 id="object3d-基类" tabindex="-1">Object3D 基类 <a class="header-anchor" href="#object3d-基类" aria-label="Permalink to &quot;Object3D 基类&quot;">​</a></h2><p>不是为每种类型的对象多次重新定义<code>.position</code>、<code>.rotation</code>和<code>.scale</code>属性，而是在 <a href="https://threejs.org/docs/#api/en/core/Object3D" target="_blank" rel="noreferrer"><code>Object3D</code></a>基类上定义一次这些属性，这样可以添加到场景中的所有其他类都 <a href="https://discoverthreejs.com/zh/book/appendix/javascript-reference/#class-inheritance-and-the-extends-keyword" title="从该基类派生" target="_blank" rel="noreferrer">从该基类派生</a>。这些包括网格、相机、灯光、点、线、助手，甚至场景本身。我们将非正式地将派生自<code>Object3D</code>的类称为 <em>场景对象</em>。</p><p>Object3D 除了这三个之外，还有许多属性和方法，由每个场景对象继承。这意味着定位和设置相机或网格的工作方式与设置灯光或场景的方式大致相同。然后根据需要将其他属性添加到场景对象，以便灯光获得颜色和强度设置，场景获得背景颜色，网格获得材质和几何体，等等。</p><h2 id="场景图与世界坐标" tabindex="-1">场景图与世界坐标 <a class="header-anchor" href="#场景图与世界坐标" aria-label="Permalink to &quot;场景图与世界坐标&quot;">​</a></h2><p>除了<code>scene.add(mesh)</code>这样给场景添加网格对象，还可以给网格对象添加网格对象，这样就形成了一个树的结构：</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020231215164448.png" alt=""></p><ul><li>使用每个对象的<code>.add</code>方法<code>.remove</code>方法，我们可以创建和操作场景图。</li><li>场景图中的每个对象（顶级场景除外）只有一个父对象，并且可以有任意数量的子对象。</li><li>渲染器遍历场景图，从场景开始，并使用每个对象相对于其父对象的位置、旋转和缩放来确定在哪里绘制它。</li><li>每一个对象都有一个坐标系：顶级场景定义了世界空间，而其他每个对象都定义了自己的局部空间。</li><li><code>mesh</code>在<code>scene</code>中变换属于世界空间操作；子<code>mesh</code>在父<code>mesh</code>中变换属于局部空间操作。</li><li>子<code>mesh</code>始终相对于父<code>mesh</code>的坐标系，remove 后再 add 替换父对象后，子<code>mesh</code>的属性如<code>position</code>是相对于替换后的父坐标系</li><li><strong>我们最终在屏幕上看到的是世界空间</strong></li></ul><blockquote><p>你可以使用 <a href="https://threejs.org/docs/#api/en/core/Object3D.children" target="_blank" rel="noreferrer"><code>.children</code></a>数组访问场景对象的所有子对象</p><p>有更复杂的方法可以访问特定的孩子，例如 <a href="https://threejs.org/docs/#api/en/core/Object3D.getObjectByName" target="_blank" rel="noreferrer"><code>Object3d.getObjectByName</code></a>方法。但是，当您不知道对象的名称或它没有名称时，直接访问<code>.children</code>数组很有用。</p></blockquote><h2 id="平移变换" tabindex="-1">平移变换 <a class="header-anchor" href="#平移变换" aria-label="Permalink to &quot;平移变换&quot;">​</a></h2><p>我们通过更改对象的 <a href="https://threejs.org/docs/#api/en/core/Object3D.position" target="_blank" rel="noreferrer"><code>.position</code></a>属性来执行平移。平移对象会将其移动到其直接父对象坐标系中的新位置，<strong>每个对象都从其父对象坐标系内的原点开始。</strong></p><blockquote><p>我们称这样的有序列表数字为<strong>向量</strong>，因为有三个数字，所以它是一个<strong>3D 向量</strong>。</p></blockquote><p>我们可以沿着 X、Y 和 Z 轴一个接一个的平移对象，或者我们可以使用<code>position.set</code>一次沿所有三个轴平移对象:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// translate one axis at a time</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.position.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.position.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.position.z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// translate all three axes at once</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.position.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>平移的方向：</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020231215171118.png" alt=""></p><p><strong>位置被存储在<code>Vector3</code>类中</strong></p><p>Three.js 有一个用于表示 3D 向量的特殊类，称为 <a href="https://threejs.org/docs/#api/math/Vector3" target="_blank" rel="noreferrer"><code>Vector3</code></a>。 这个类有<code>.x</code>、<code>.y</code>和<code>.z</code>属性和方法<code>.set</code>来帮助我们操作它们。每当我们创建任何场景对象时，例如<code>Mesh</code>，<code>Vector3</code>都会被自动创建并存储在<code>.position</code>中：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// when we create a mesh ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mesh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... internally, three.js creates a Vector3 for us:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.position </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vector3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><blockquote><p>three.js 也有表示 <a href="https://threejs.org/docs/#api/en/math/Vector2" target="_blank" rel="noreferrer">2D 向量</a>和 <a href="https://threejs.org/docs/#api/en/math/Vector4" target="_blank" rel="noreferrer">4D 向量</a>的类</p></blockquote><h2 id="缩放转换" tabindex="-1">缩放转换 <a class="header-anchor" href="#缩放转换" aria-label="Permalink to &quot;缩放转换&quot;">​</a></h2><p>只要我们在所有三个轴上缩放相同的数量，缩放对象就会使其变大或变小。如果我们按不同的量缩放轴，<strong>对象将被压扁或拉伸</strong>。</p><p>像<code>.position</code>一样，<code>.scale</code>也是存储在<code>Vector3</code>中的, 对象的初始缩放比例是(1,1,1)：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// when we create a mesh...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mesh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... internally, three.js creates a Vector3 for us:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vector3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>统一缩放：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>非均匀缩放：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// double the initial width</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// halve the initial width</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>负比例值镜像对象</strong>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 镜像对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mirror the mesh across the X-axis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mirror the mesh across the Y-axis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mirror the mesh across the Z-axis</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale.z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 镜像并挤压</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// mirror and squash mesh to half width</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>很好理解，就是位于(1,X,X)的某顶点变换到了(-1,X,X)，全部的点都这样变换，就会镜像。</p><blockquote><p>相机和灯光无法缩放</p></blockquote><h2 id="旋转变换" tabindex="-1">旋转变换 <a class="header-anchor" href="#旋转变换" aria-label="Permalink to &quot;旋转变换&quot;">​</a></h2><p>与平移或缩放相比，旋转需要更加小心。这有几个原因，但主要是<strong>旋转顺序很重要</strong>。</p><p>不同的旋转顺序最后可能不会给出相同的结果，这取决于长宽高是否一致</p><blockquote><p>我们用于<code>.position</code>和<code>.scale</code>的不起眼的<code>Vector3</code>类不足以存储旋转数据。相反，three.js 不是使用一个，而是用 <em>两个</em> 数学类用于存储旋转数据。我们将在这里查看到更详细的内容： <a href="https://en.wikipedia.org/wiki/Euler_angles" target="_blank" rel="noreferrer">欧拉角</a>。幸运的是，它与<code>Vector3</code>类相似。</p></blockquote><p>欧拉角在 three.js 中使用类 <a href="https://threejs.org/docs/#api/en/math/Euler" target="_blank" rel="noreferrer"><code>Euler</code></a>表示 。与<code>.position</code>和<code>.scale</code>一样，当我们创建一个新的场景对象时，会自动创建一个<code>Euler</code>实例并为其赋予默认值。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// when we create a mesh...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mesh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... internally, three.js creates an Euler for us:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.rotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Euler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>与<code>Vector3</code>一样，有<code>.x</code>、<code>.y</code>和<code>.z</code>属性，以及<code>.set</code>方法；可以自己创建<code>Euler</code>实例；可以省略参数以使用默认值，同样，所有轴的默认值为零。</p><p>默认情况下，three.js 将在对象的局部空间中围绕 X 轴，然后围绕 Y 轴，最后围绕 Z 轴旋转。我们可以使用 <a href="https://threejs.org/docs/#api/en/math/Euler.order" target="_blank" rel="noreferrer"><code>Euler.order</code>属性</a>来改变它。默认顺序称为“XYZ”，但也可以使用“YZX”、“ZXY”、“XZY”、“YXZ”和“ZYX”。</p><p><strong>旋转单位是弧度</strong></p><p>我们可以使用 <a href="https://threejs.org/docs/#api/en/math/MathUtils.degToRad" target="_blank" rel="noreferrer"><code>.degToRad</code></a>实用程序将度数转换为弧度。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { MathUtils } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;three&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rads</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MathUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">degToRad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.57079... = π/2</span></span></code></pre></div><p>另一个旋转类：四元数 Quaternions</p><p>我们可以互换使用<strong>四元数</strong>和<strong>欧拉角</strong>。当我们更改<code>mesh.rotation</code>时，<code>mesh.quaternion</code>属性会自动更新，反之亦然。这意味着我们可以在欧拉角适用时使用欧拉角，并在四元数适用时切换到四元数。</p><p>欧拉角有几个缺点，在创建动画或进行涉及旋转的数学时会变得很明显。特别是，我们不能将两个欧拉角相加（更著名的是，它们还存在一种叫做 <a href="https://en.wikipedia.org/wiki/Gimbal_lock" target="_blank" rel="noreferrer">万向锁</a>的问题）。四元数没有这些缺点。另一方面，它们比欧拉角更难使用，所以现在我们将坚持使用更简单的<code>Euler</code>类。</p><p>现在，请记下这两种旋转对象的方法：</p><ol><li><strong>使用欧拉角，使用<code>Euler</code>类表示并存储在<code>.rotation</code>属性中。</strong></li><li><strong>使用四元数，使用<code>Quaternion</code>类表示并存储在<code>.quaternion</code>属性中。</strong></li></ol><p>以下是一些需要注意的重要事项：</p><ol><li>并非所有对象都可以旋转。比如 <a href="https://discoverthreejs.com/zh/book/first-steps/physically-based-rendering/#introducing-the-directionallight" title="我们上一章介绍的\`DirectionalLight\`" target="_blank" rel="noreferrer">我们上一章介绍的<code>DirectionalLight</code></a>就不能旋转。灯光从某个位置照射到目标，灯光的角度是根据目标的位置而不是<code>.rotation</code>属性计算得出的。</li><li>three.js 中的角度是使用弧度而不是度数指定的。唯一的例外是 <a href="https://threejs.org/docs/#api/en/cameras/PerspectiveCamera.fov" target="_blank" rel="noreferrer"><code>PerspectiveCamera.fov</code></a>属性使用度数来匹配真实世界摄影惯例的。</li></ol><h2 id="转换矩阵" tabindex="-1">转换矩阵 <a class="header-anchor" href="#转换矩阵" aria-label="Permalink to &quot;转换矩阵&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 0 0 0</span></span>
<span class="line"><span>0 1 0 0</span></span>
<span class="line"><span>0 0 1 0</span></span>
<span class="line"><span>0 0 0 1</span></span></code></pre></div><p>它有四行四列，所以它是一个 4×4 矩阵，它存储了一个对象的完整变换，这就是我们将其称为<strong>变换矩阵</strong>的原因。同样的，也有一个 three.js 类来处理这种类型的数学对象，称为 <a href="https://threejs.org/docs/#api/en/math/Matrix4" target="_blank" rel="noreferrer"><code>Matrix4</code></a>。 还有一个类表示 3×3 的矩阵称为<code>Matrix3</code>。当矩阵在 <a href="https://en.wikipedia.org/wiki/Main_diagonal" target="_blank" rel="noreferrer">主对角线</a>上全为 1 而其他地方都为 0 时，就像上图这样，我们称其为 <a href="https://en.wikipedia.org/wiki/Identity_matrix" target="_blank" rel="noreferrer"><strong>单位矩阵</strong>，I</a>。</p><p>与单独的变换相比，矩阵对 CPU 和 GPU 的处理效率要高得多，它代表了一种折衷方案，可以为我们提供两全其美的效果。我们人类可以使用更简单<code>.position</code>，<code>.rotation</code>和<code>.scale</code>属性，然后，每当我们调用<code>.render</code>时，渲染器都会更新每个对象的矩阵并将它们用于内部计算。</p><p>当我们创建一个网格时，会自动创建一个局部变换矩阵：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// when we create a mesh</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mesh</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ... internally, three.js creates a Matrix4 for us:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.matrix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Matrix4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><blockquote><p>通常，我们不需要手动调用<code>.updateMatrix</code>，因为渲染器会在渲染之前更新每个对象的矩阵。但是，在这里，我们希望立即看到矩阵的变化，因此我们必须强制更新。（或者 render 一下，也会更新）</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.position.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.position.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.position.z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 0 0 2</span></span>
<span class="line"><span>0 1 0 4</span></span>
<span class="line"><span>0 0 1 6</span></span>
<span class="line"><span>0 0 0 1</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.scale.z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mesh.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>5 0 0 2</span></span>
<span class="line"><span>0 7 0 4</span></span>
<span class="line"><span>0 0 9 6</span></span>
<span class="line"><span>0 0 0 1</span></span></code></pre></div><p>围绕 X、Y、Z 轴的旋转：</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020231217154940.png" alt=""></p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020231217154947.png" alt=""></p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020231217154955.png" alt=""></p><blockquote><p>理解：旋转时，视角不变时，除非对称，否则长度会变，这就是为什么缩放会变的原因</p></blockquote><p>世界矩阵：</p><p>正如我们多次提到的，对我们来说重要的是对象在世界空间中的最终位置，因为这是我们在渲染对象后所看到的。为了帮助计算这一点，<strong>每个对象都有第二个变换矩阵，即世界矩阵</strong>，存储在 <a href="https://threejs.org/docs/#api/en/core/.matrixWorld" target="_blank" rel="noreferrer"><code>Object3D.matrixWorld</code></a>中。 这两个矩阵在数学上没有区别。他们都是 4×4 变换矩阵，当我们创建网格或任何其他场景对象时，局部矩阵和世界矩阵都会自动创建。</p>`,70),h=[t];function p(l,k,r,o,d,c){return a(),i("div",null,h)}const y=s(n,[["render",p]]);export{E as __pageData,y as default};
