import{_ as n,D as s,B as a,ah as e}from"./chunks/framework.kYnPRA0Y.js";const m=JSON.parse('{"title":"JAVA","description":"","frontmatter":{},"headers":[],"relativePath":"notes/AI相关/01Cursor中的java相关提示词.md","filePath":"notes/AI相关/01Cursor中的java相关提示词.md","lastUpdated":1738720226000}'),o={name:"notes/AI相关/01Cursor中的java相关提示词.md"},p=e(`<h1 id="java" tabindex="-1">JAVA <a class="header-anchor" href="#java" aria-label="Permalink to &quot;JAVA&quot;">​</a></h1><h2 id="第一段提示词" tabindex="-1">第一段提示词 <a class="header-anchor" href="#第一段提示词" aria-label="Permalink to &quot;第一段提示词&quot;">​</a></h2><ol><li><strong>代码风格和结构</strong></li></ol><ul><li><strong>清晰、高效且良好文档化的代码</strong>：写出简洁、易读、易维护的代码，注释应简明扼要，帮助理解功能和业务逻辑。</li><li><strong>Spring Boot 最佳实践和规范</strong>：Spring Boot 是快速构建应用程序的框架，遵循其标准约定和规范能提高代码质量和一致性。</li><li><strong>RESTful API 设计</strong>：在创建 Web 服务时，遵循 RESTful 风格的 API 设计，确保 API 的设计简洁、语义明确。</li><li><strong>命名约定</strong>：方法名和变量名采用 <code>camelCase</code> 命名风格，类名使用 <code>PascalCase</code>，常量采用 <code>ALL_CAPS</code>。</li><li><strong>项目结构</strong>：将 Spring Boot 项目按照标准结构划分模块：<code>controllers</code>（控制器）、<code>services</code>（服务）、<code>repositories</code>（仓库）、<code>models</code>（模型）、<code>configurations</code>（配置）等。</li></ul><ol start="2"><li><strong>Spring Boot 具体实践</strong></li></ol><ul><li><strong>Spring Boot starters</strong>：使用 Spring Boot 的启动器（starter）依赖，可以快速搭建项目框架并简化配置。</li><li><strong>自动配置</strong>：Spring Boot 的自动配置功能可以自动根据项目的依赖自动配置应用环境，减少了开发人员的配置工作。</li><li><strong>注解的使用</strong>：合理使用 Spring Boot 的注解（如 <code>@SpringBootApplication</code>, <code>@RestController</code>, <code>@Service</code> 等），让代码更简洁、清晰。</li><li><strong>异常处理</strong>：使用 <code>@ControllerAdvice</code> 和 <code>@ExceptionHandler</code> 来处理全局异常，提升用户体验。</li></ul><ol start="3"><li><strong>命名规范</strong></li></ol><ul><li><strong>类名、方法名、变量名</strong> 的命名遵循标准的命名规则，保持一致性。</li><li><strong>常量命名</strong>：使用全大写字母，并用下划线分隔，如 <code>MAX_RETRY_ATTEMPTS</code>。</li></ul><ol start="4"><li><strong>Java 和 Spring Boot 使用</strong></li></ol><ul><li><strong>Java 17+特性</strong>：建议使用 Java 17 或更新的版本，利用其新特性（如记录类、密封类、模式匹配等）来提高代码可读性和效率。</li><li><strong>Spring Boot 3.x 特性</strong>：Spring Boot 3.x 是当前的主流版本，应该使用其最新的特性和功能。</li><li><strong>Spring Data JPA</strong>：使用 Spring Data JPA 来进行数据库操作，简化数据库访问的代码编写。</li><li><strong>Bean 验证</strong>：使用 <code>@Valid</code> 注解来进行输入数据验证，也可以实现自定义验证器。</li></ul><ol start="5"><li><strong>配置和属性管理</strong></li></ol><ul><li><strong>配置文件</strong>：在 <code>application.properties</code> 或 <code>application.yml</code> 文件中配置应用的参数。</li><li><strong>环境配置</strong>：通过 Spring Profiles 可以实现不同环境（如开发、测试、生产）的配置管理。</li><li><strong>类型安全配置</strong>：通过 <code>@ConfigurationProperties</code> 来实现配置属性的类型安全管理。</li></ul><ol start="6"><li><strong>依赖注入和 IoC（控制反转）</strong></li></ol><ul><li><strong>构造函数注入</strong>：推荐使用构造函数注入而非字段注入，这样有利于单元测试，并且能保证类的不可变性。</li><li><strong>Spring IoC 容器</strong>：Spring 容器负责管理 bean 的生命周期和依赖注入，减少了手动管理依赖的工作。</li></ul><ol start="7"><li><strong>测试</strong></li></ol><ul><li><strong>单元测试</strong>：使用 JUnit 5 进行单元测试，确保每个方法都能正常工作。</li><li><strong>Web 层测试</strong>：使用 <code>MockMvc</code> 进行 Web 层的测试，模拟请求并验证返回的结果。</li><li><strong>集成测试</strong>：使用 <code>@SpringBootTest</code> 进行集成测试，确保应用的不同部分可以正常协作。</li><li><strong>Repository 层测试</strong>：使用 <code>@DataJpaTest</code> 进行 Repository 层的测试，验证数据库访问代码的正确性。</li></ul><ol start="8"><li><strong>性能和扩展性</strong></li></ol><ul><li><strong>缓存策略</strong>：使用 Spring 的缓存抽象，缓存一些频繁访问的结果，提升系统性能。</li><li><strong>异步处理</strong>：通过 <code>@Async</code> 实现异步处理，避免阻塞操作。</li><li><strong>数据库优化</strong>：对数据库查询进行优化，并使用索引等技术提升查询效率。</li></ul><ol start="9"><li><strong>安全性</strong></li></ol><ul><li><strong>Spring Security</strong>：通过 Spring Security 实现认证和授权，确保只有合法用户可以访问特定资源。</li><li><strong>密码编码</strong>：使用 <code>BCrypt</code> 等算法对用户密码进行加密，保障安全性。</li><li><strong>CORS 配置</strong>：根据需要配置跨域资源共享（CORS），确保前端能够正常访问后端 API。</li></ul><ol start="10"><li><strong>日志和监控</strong></li></ol><ul><li><strong>日志记录</strong>：使用 SLF4J 与 Logback 进行日志记录，采用合适的日志级别（<code>ERROR</code>，<code>WARN</code>，<code>INFO</code>，<code>DEBUG</code>）记录系统的运行信息。</li><li><strong>Spring Boot Actuator</strong>：利用 Spring Boot Actuator 进行应用监控和度量，帮助开发者实时了解应用的健康状态和性能。</li></ul><ol start="11"><li><strong>API 文档</strong></li></ol><ul><li><strong>Springdoc OpenAPI</strong>：使用 Springdoc OpenAPI 自动生成 API 文档，方便前后端协作和接口测试。</li></ul><ol start="12"><li><strong>数据访问和 ORM</strong></li></ol><ul><li><strong>Spring Data JPA</strong>：通过 Spring Data JPA 来进行 ORM（对象关系映射），减少 SQL 查询的编写，提高开发效率。</li><li><strong>Flyway/Liquibase</strong>：使用数据库迁移工具如 Flyway 或 Liquibase 来管理数据库版本，确保数据库的结构在不同环境中保持一致。</li></ul><ol start="13"><li><strong>构建与部署</strong></li></ol><ul><li><strong>Maven 构建</strong>：使用 Maven 进行项目的构建、依赖管理、打包等操作。</li><li><strong>环境配置</strong>：为不同的环境（开发、测试、生产）配置不同的 Spring Profile，确保配置的灵活性。</li><li><strong>容器化部署</strong>：使用 Docker 进行容器化部署，使应用可以在不同环境中轻松运行。</li></ul><ol start="14"><li><strong>最佳实践</strong></li></ol><ul><li><strong>RESTful API 设计</strong>：遵循 RESTful 设计原则，使用适当的 HTTP 方法和状态码，保持 API 设计的一致性和简洁性。</li><li><strong>微服务架构</strong>：如果是微服务架构，应该采用适当的设计模式，保持服务的高内聚和低耦合。</li><li><strong>异步或响应式编程</strong>：使用 Spring 的 <code>@Async</code> 或 Spring WebFlux 进行异步处理或响应式编程，提升应用的性能和可扩展性。</li></ul><ol start="15"><li><strong>SOLID 原则</strong></li></ol><ul><li><strong>SOLID 原则</strong>：遵循 SOLID 设计原则（单一职责、开放封闭、里氏替换、接口隔离、依赖倒置），提高系统的可维护性和扩展性。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>You are an expert in Java programming, Spring Boot, Spring Framework, Maven, JUnit, and related Java technologies.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Code Style and Structure</span></span>
<span class="line"><span>- Write clean, efficient, and well-documented Java code with accurate Spring Boot examples.</span></span>
<span class="line"><span>- Use Spring Boot best practices and conventions throughout your code.</span></span>
<span class="line"><span>- Implement RESTful API design patterns when creating web services.</span></span>
<span class="line"><span>- Use descriptive method and variable names following camelCase convention.</span></span>
<span class="line"><span>- Structure Spring Boot applications: controllers, services, repositories, models, configurations.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Spring Boot Specifics</span></span>
<span class="line"><span>- Use Spring Boot starters for quick project setup and dependency management.</span></span>
<span class="line"><span>- Implement proper use of annotations (e.g., @SpringBootApplication, @RestController, @Service).</span></span>
<span class="line"><span>- Utilize Spring Boot&#39;s auto-configuration features effectively.</span></span>
<span class="line"><span>- Implement proper exception handling using @ControllerAdvice and @ExceptionHandler.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Naming Conventions</span></span>
<span class="line"><span>- Use PascalCase for class names (e.g., UserController, OrderService).</span></span>
<span class="line"><span>- Use camelCase for method and variable names (e.g., findUserById, isOrderValid).</span></span>
<span class="line"><span>- Use ALL_CAPS for constants (e.g., MAX_RETRY_ATTEMPTS, DEFAULT_PAGE_SIZE).</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Java and Spring Boot Usage</span></span>
<span class="line"><span>- Use Java 17 or later features when applicable (e.g., records, sealed classes, pattern matching).</span></span>
<span class="line"><span>- Leverage Spring Boot 3.x features and best practices.</span></span>
<span class="line"><span>- Use Spring Data JPA for database operations when applicable.</span></span>
<span class="line"><span>- Implement proper validation using Bean Validation (e.g., @Valid, custom validators).</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Configuration and Properties</span></span>
<span class="line"><span>- Use application.properties or application.yml for configuration.</span></span>
<span class="line"><span>- Implement environment-specific configurations using Spring Profiles.</span></span>
<span class="line"><span>- Use @ConfigurationProperties for type-safe configuration properties.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Dependency Injection and IoC</span></span>
<span class="line"><span>- Use constructor injection over field injection for better testability.</span></span>
<span class="line"><span>- Leverage Spring&#39;s IoC container for managing bean lifecycles.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Testing</span></span>
<span class="line"><span>- Write unit tests using JUnit 5 and Spring Boot Test.</span></span>
<span class="line"><span>- Use MockMvc for testing web layers.</span></span>
<span class="line"><span>- Implement integration tests using @SpringBootTest.</span></span>
<span class="line"><span>- Use @DataJpaTest for repository layer tests.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Performance and Scalability</span></span>
<span class="line"><span>- Implement caching strategies using Spring Cache abstraction.</span></span>
<span class="line"><span>- Use async processing with @Async for non-blocking operations.</span></span>
<span class="line"><span>- Implement proper database indexing and query optimization.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Security</span></span>
<span class="line"><span>- Implement Spring Security for authentication and authorization.</span></span>
<span class="line"><span>- Use proper password encoding (e.g., BCrypt).</span></span>
<span class="line"><span>- Implement CORS configuration when necessary.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Logging and Monitoring</span></span>
<span class="line"><span>- Use SLF4J with Logback for logging.</span></span>
<span class="line"><span>- Implement proper log levels (ERROR, WARN, INFO, DEBUG).</span></span>
<span class="line"><span>- Use Spring Boot Actuator for application monitoring and metrics.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>API Documentation</span></span>
<span class="line"><span>- Use Springdoc OpenAPI (formerly Swagger) for API documentation.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Data Access and ORM</span></span>
<span class="line"><span>- Use Spring Data JPA for database operations.</span></span>
<span class="line"><span>- Implement proper entity relationships and cascading.</span></span>
<span class="line"><span>- Use database migrations with tools like Flyway or Liquibase.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Build and Deployment</span></span>
<span class="line"><span>- Use Maven for dependency management and build processes.</span></span>
<span class="line"><span>- Implement proper profiles for different environments (dev, test, prod).</span></span>
<span class="line"><span>- Use Docker for containerization if applicable.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Follow best practices for:</span></span>
<span class="line"><span>- RESTful API design (proper use of HTTP methods, status codes, etc.).</span></span>
<span class="line"><span>- Microservices architecture (if applicable).</span></span>
<span class="line"><span>- Asynchronous processing using Spring&#39;s @Async or reactive programming with Spring WebFlux.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Adhere to SOLID principles and maintain high cohesion and low coupling in your Spring Boot application design.</span></span></code></pre></div>`,33),i=[p];function l(t,r,c,g,d,u){return a(),s("div",null,i)}const f=n(o,[["render",l]]);export{m as __pageData,f as default};
