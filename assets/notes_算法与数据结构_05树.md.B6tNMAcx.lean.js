import{_ as h,D as a,Q as s,ah as i,B as n}from"./chunks/framework.kYnPRA0Y.js";const P=JSON.parse('{"title":"树","description":"","frontmatter":{},"headers":[],"relativePath":"notes/算法与数据结构/05树.md","filePath":"notes/算法与数据结构/05树.md","lastUpdated":1738344267000}'),l={name:"notes/算法与数据结构/05树.md"},k=i("",20),t={class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},p={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"26.594ex",height:"2.23ex",role:"img",focusable:"false",viewBox:"0 -903.7 11754.6 985.7","aria-hidden":"true"},e=i("",1),E=[e],r=s("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("msup",null,[s("mn",null,"2"),s("mn",null,"0")]),s("mo",null,"+"),s("mo",null,"…"),s("mo",null,"…"),s("mo",null,"+"),s("msup",null,[s("mn",null,"2"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"k"),s("mo",null,"−"),s("mn",null,"1")])]),s("mo",null,"="),s("msup",null,[s("mn",null,"2"),s("mi",null,"k")]),s("mo",null,"−"),s("mn",null,"1")])],-1),d=i("",66),g=s("li",null,[s("p",null,"路径：若树中存在某个结点序列 k_1,k_2······k_j。满足 k_i 是 k_{i+1}的双亲，则该结点序列是树上的一条路径。")],-1),y=s("li",null,[s("p",null,"树的路径长度是指树根到树中每一个结点的路径之和。")],-1),F=s("li",null,[s("p",null,"完全二叉树的路径长度最短。")],-1),o=s("li",null,[s("p",null,"结点的权：给树的结点赋以一定意义的数值，称为结点的全权。")],-1),c=s("li",null,[s("p",null,"结点的带权路径长度：从树根到某个结点的路径长度与该结点的权的积。")],-1),C=s("li",null,[s("p",null,"树的带权路径长度：树中所有叶子结点的带权路径长度之和。")],-1),T=s("p",null,[s("strong",null,"哈夫曼树的定义：")],-1),u=s("ul",null,[s("li",null,"由 n 个带权叶子结点构成的二叉树具有不同形态。"),s("li",null,"其中 WPL 最小的二叉树"),s("li",null,"又叫做最优二叉树，或最佳判定树。")],-1),m={class:"MathJax",jax:"SVG",display:"true",style:{direction:"ltr",display:"block","text-align":"center",margin:"1em 0",position:"relative"}},Q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-2.864ex"},xmlns:"http://www.w3.org/2000/svg",width:"14.43ex",height:"6.399ex",role:"img",focusable:"false",viewBox:"0 -1562.5 6378 2828.3","aria-hidden":"true"},A=i("",1),D=[A],B=s("mjx-assistive-mml",{unselectable:"on",display:"block",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",overflow:"hidden",width:"100%"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("mi",null,"w"),s("mi",null,"p"),s("mi",null,"l"),s("mo",null,"="),s("munderover",null,[s("mo",{"data-mjx-texclass":"OP"},"∑"),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"k"),s("mo",null,"="),s("mn",null,"1")]),s("mrow",{"data-mjx-texclass":"ORD"},[s("mi",null,"n")])]),s("msub",null,[s("mi",null,"w"),s("mi",null,"k")]),s("msub",null,[s("mi",null,"l"),s("mi",null,"k")])])],-1),b=s("p",null,[s("em",null,"其中，w_k 是第 i 个叶子结点的权值，l_k 是根到第 i 个叶子结点的路径长度。")],-1),_=i("",28);function f(x,v,q,L,H,w){return n(),a("div",null,[k,s("mjx-container",t,[(n(),a("svg",p,E)),r]),d,s("ul",null,[g,y,F,o,c,C,s("li",null,[T,u,s("mjx-container",m,[(n(),a("svg",Q,D)),B]),b])]),_])}const M=h(l,[["render",f]]);export{P as __pageData,M as default};
