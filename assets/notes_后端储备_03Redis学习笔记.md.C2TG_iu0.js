import{_ as i,c as a,as as l,o as n}from"./chunks/framework.CsiIftoR.js";const c=JSON.parse('{"title":"Redis 学习笔记","description":"","frontmatter":{},"headers":[],"relativePath":"notes/后端储备/03Redis学习笔记.md","filePath":"notes/后端储备/03Redis学习笔记.md","lastUpdated":1738327344000}'),p={name:"notes/后端储备/03Redis学习笔记.md"};function e(t,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="redis-学习笔记" tabindex="-1">Redis 学习笔记 <a class="header-anchor" href="#redis-学习笔记" aria-label="Permalink to &quot;Redis 学习笔记&quot;">​</a></h1><h2 id="redis-安装" tabindex="-1">Redis 安装 <a class="header-anchor" href="#redis-安装" aria-label="Permalink to &quot;Redis 安装&quot;">​</a></h2><ul><li><p>当前 redis 最新稳定版本是 4.0.9</p></li><li><p>当前 ubuntu 虚拟机中已经安装好了 redis，以下步骤可以跳过 最新稳定版本下载链接： <a href="http://download.redis.io/releases/redis-4.0.9.tar.gz" target="_blank" rel="noreferrer">http://download.redis.io/releases/redis-4.0.9.tar.gz</a></p></li><li><p>step1:下载</p><blockquote><p>wget <a href="http://download.redis.io/releases/redis-4.0.9.tar.gz" target="_blank" rel="noreferrer">http://download.redis.io/releases/redis-4.0.9.tar.gz</a></p></blockquote><p><img src="https://oss.justin3go.com/blogs/%E4%B8%8B%E8%BD%BDredis.png" alt="img"></p></li><li><p>step2:解压</p><blockquote><p>tar xzf redis-4.0.9.tar.gz</p></blockquote></li><li><p>step3:移动，放到 usr/local⽬录下</p><blockquote><p>sudo mv ./redis-4.0.9 /usr/local/redis/</p></blockquote></li><li><p>step4:进⼊redis⽬录</p><blockquote><p>cd /usr/local/redis/</p></blockquote></li><li><p>step5:生成</p><blockquote><p>sudo make</p></blockquote><img src="https://oss.justin3go.com/blogs/redismake.png" alt="img" style="zoom:50%;"></li><li><p>step6:测试,这段运⾏时间会较⻓</p><blockquote><p>sudo make test</p></blockquote><img src="https://oss.justin3go.com/blogs/maketest.png" alt="img" style="zoom:50%;"></li><li><p>step7:安装,将 redis 的命令安装到/usr/local/bin/⽬录</p><blockquote><p>sudo make install</p></blockquote></li><li><p>step8:安装完成后，我们进入目录/usr/local/bin 中查看</p><blockquote><p>cd /usr/local/bin ls -all</p></blockquote><p><img src="https://oss.justin3go.com/blogs/p1_12.png" alt="img"></p><blockquote><ul><li>redis-server redis 服务器</li><li>redis-cli redis 命令行客户端</li><li>redis-benchmark redis 性能测试工具</li><li>redis-check-aof AOF 文件修复工具</li><li>redis-check-rdb RDB 文件检索工具</li></ul></blockquote></li><li><p>step9:配置⽂件，移动到/etc/⽬录下</p></li><li><p>配置⽂件⽬录为/usr/local/redis/redis.conf</p><blockquote><p>sudo cp /usr/local/redis/redis.conf /etc/redis/</p></blockquote></li><li><p>Mac 上安装 Redis:</p><ul><li>安装 Homebrew：</li></ul><blockquote><p><a href="https://brew.sh/" target="_blank" rel="noreferrer">https://brew.sh/</a></p></blockquote><ul><li>使用 brew 安装 Redis</li></ul><blockquote><p><a href="https://www.cnblogs.com/cloudshadow/p/mac_brew_install_redis.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/cloudshadow/p/mac_brew_install_redis.html</a></p></blockquote></li></ul><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><ul><li><p>Redis 的配置信息在/etc/redis/redis.conf 下。</p></li><li><p>查看</p><blockquote><p>sudo vi /etc/redis/redis.conf</p></blockquote></li></ul><h3 id="核心配置选项" tabindex="-1">核心配置选项 <a class="header-anchor" href="#核心配置选项" aria-label="Permalink to &quot;核心配置选项&quot;">​</a></h3><ul><li><p>绑定 ip：如果需要远程访问，可将此⾏注释，或绑定⼀个真实 ip</p><blockquote><p>bind 127.0.0.1</p></blockquote></li><li><p>端⼝，默认为 6379</p><blockquote><p>port 6379</p></blockquote></li><li><p>是否以守护进程运⾏</p><ul><li>如果以守护进程运⾏，则不会在命令⾏阻塞，类似于服务</li><li>如果以⾮守护进程运⾏，则当前终端被阻塞</li><li>设置为 yes 表示守护进程，设置为 no 表示⾮守护进程</li><li>推荐设置为 yes</li></ul><blockquote><p>daemonize yes</p></blockquote></li><li><p>数据⽂件</p><blockquote><p>dbfilename dump.rdb</p></blockquote></li><li><p>数据⽂件存储路径</p><blockquote><p>dir /var/lib/redis</p></blockquote></li><li><p>⽇志⽂件</p><blockquote><p>logfile &quot;/var/log/redis/redis-server.log&quot;</p></blockquote></li><li><p>数据库，默认有 16 个</p><blockquote><p>database 16</p></blockquote></li><li><p>主从复制，类似于双机备份。</p><blockquote><p>slaveof</p></blockquote></li></ul><h3 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h3><p>redis 配置信息 <a href="http://blog.csdn.net/ljphilp/article/details/52934933" target="_blank" rel="noreferrer">http://blog.csdn.net/ljphilp/article/details/52934933</a></p><h2 id="服务器端" tabindex="-1">服务器端 <a class="header-anchor" href="#服务器端" aria-label="Permalink to &quot;服务器端&quot;">​</a></h2><ul><li><p>服务器端的命令为 redis-server</p></li><li><p>可以使⽤help 查看帮助⽂档</p><blockquote><p>redis-server --help</p></blockquote></li><li><p>个人习惯</p><blockquote><p>ps aux | grep redis 查看 redis 服务器进程 sudo kill -9 pid 杀死 redis 服务器 sudo redis-server /etc/redis/redis.conf 指定加载的配置文件</p></blockquote></li></ul><h2 id="客户端" tabindex="-1">客户端 <a class="header-anchor" href="#客户端" aria-label="Permalink to &quot;客户端&quot;">​</a></h2><ul><li><p>客户端的命令为 redis-cli</p></li><li><p>可以使⽤help 查看帮助⽂档</p><blockquote><p>redis-cli --help</p></blockquote></li><li><p>连接 redis</p><blockquote><p>redis-cli</p></blockquote><img src="https://oss.justin3go.com/blogs/%E8%BF%9E%E6%8E%A5redis.png" alt="img" style="zoom:50%;"></li><li><p>运⾏测试命令</p><blockquote><p>ping</p></blockquote><img src="https://oss.justin3go.com/blogs/redis%E6%B5%8B%E8%AF%95%E8%BF%9E%E6%8E%A5.png" alt="img" style="zoom:50%;"></li><li><p>切换数据库</p></li><li><p>数据库没有名称，默认有 16 个，通过 0-15 来标识，连接 redis 默认选择第一个数据库</p><blockquote><p>select 10</p></blockquote><img src="https://oss.justin3go.com/blogs/redis%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E5%BA%93.png" alt="img" style="zoom:50%;"></li></ul><h2 id="数据结构" tabindex="-1">数据结构 <a class="header-anchor" href="#数据结构" aria-label="Permalink to &quot;数据结构&quot;">​</a></h2><ul><li><p>redis 是 key-value 的数据结构，每条数据都是⼀个键值对</p></li><li><p>键的类型是字符串</p></li><li><p>注意：键不能重复</p><p><img src="https://oss.justin3go.com/blogs/p1_67.png" alt="img"></p></li><li><p>值的类型分为五种：</p><ul><li>字符串 string</li><li>哈希 hash</li><li>列表 list</li><li>集合 set</li><li>有序集合 zset</li></ul></li></ul><h2 id="数据操作行为" tabindex="-1">数据操作行为 <a class="header-anchor" href="#数据操作行为" aria-label="Permalink to &quot;数据操作行为&quot;">​</a></h2><ul><li>保存</li><li>修改</li><li>获取</li><li>删除</li></ul><h2 id="string-类型" tabindex="-1">string 类型 <a class="header-anchor" href="#string-类型" aria-label="Permalink to &quot;string 类型&quot;">​</a></h2><ul><li>字符串类型是 Redis 中最为基础的数据存储类型，它在 Redis 中是二进制安全的，这便意味着该类型可以接受任何格式的数据，如 JPEG 图像数据或 Json 对象描述信息等。在 Redis 中字符串类型的 Value 最多可以容纳的数据长度是 512M。</li></ul><h2 id="保存" tabindex="-1">保存 <a class="header-anchor" href="#保存" aria-label="Permalink to &quot;保存&quot;">​</a></h2><p>如果设置的键不存在则为添加，如果设置的键已经存在则修改</p><ul><li><p>设置键值</p><blockquote><p>set key value</p></blockquote></li><li><p>例 1：设置键为 name 值为 itcast 的数据</p><blockquote><p>set name itcast</p></blockquote><p><img src="https://oss.justin3go.com/blogs/p1_15.png" alt="img"></p></li><li><p>设置键值及过期时间，以秒为单位</p><blockquote><p>setex key seconds value</p></blockquote></li><li><p>例 2：设置键为 aa 值为 aa 过期时间为 3 秒的数据</p><blockquote><p>setex aa 3 aa</p></blockquote><p><img src="https://oss.justin3go.com/blogs/p1_16.png" alt="img"></p></li><li><p>设置多个键值</p><blockquote><p>mset key1 value1 key2 value2 ...</p></blockquote></li><li><p>例 3：设置键为&#39;a1&#39;值为&#39;python&#39;、键为&#39;a2&#39;值为&#39;java&#39;、键为&#39;a3&#39;值为&#39;c&#39;</p><blockquote><p>mset a1 python a2 java a3 c</p></blockquote><p><img src="https://oss.justin3go.com/blogs/p1_17.png" alt="img"></p></li><li><p>追加值</p><blockquote><p>append key value</p></blockquote></li><li><p>例 4：向键为 a1 中追加值&#39; haha&#39;</p><blockquote><p>append &#39;a1&#39; &#39;haha&#39;</p></blockquote><p><img src="https://oss.justin3go.com/blogs/p1_18.png" alt="img"></p><p><strong>......其他请自行搜索查看</strong></p></li></ul><h2 id="获取" tabindex="-1">获取 <a class="header-anchor" href="#获取" aria-label="Permalink to &quot;获取&quot;">​</a></h2><ul><li><p>获取：根据键获取值，如果不存在此键则返回 nil</p><blockquote><p>get key</p></blockquote></li><li><p>例 5：获取键&#39;name&#39;的值</p><blockquote><p>get &#39;name&#39;</p></blockquote></li><li><p>根据多个键获取多个值</p><blockquote><p>mget key1 key2 ...</p></blockquote></li><li><p>例 6：获取键 a1、a2、a3&#39;的值</p><blockquote><p>mget a1 a2 a3</p></blockquote><p><img src="https://oss.justin3go.com/blogs/mget.png" alt="img"></p></li></ul><h2 id="python-交互" tabindex="-1">Python 交互 <a class="header-anchor" href="#python-交互" aria-label="Permalink to &quot;Python 交互&quot;">​</a></h2><ul><li>在桌面上创建 redis 目录</li><li>使用 pycharm 打开 redis 目录</li><li>创建 redis_string.py 文件</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #创建 StrictRedis 对象，与 redis 服务器建⽴连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StrictRedis()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span></code></pre></div><h3 id="string-增加" tabindex="-1">string-增加 <a class="header-anchor" href="#string-增加" aria-label="Permalink to &quot;string-增加&quot;">​</a></h3><ul><li>⽅法 set，添加键、值，如果添加成功则返回 True，如果添加失败则返回 False</li><li>编写代码如下</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #创建 StrictRedis 对象，与 redis 服务器建⽴连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StrictRedis()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #添加键 name，值为 itheima</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sr.set(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;itheima&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #输出响应结果，如果添加成功则返回 True，否则返回 False</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span></code></pre></div><h3 id="string-获取" tabindex="-1">string-获取 <a class="header-anchor" href="#string-获取" aria-label="Permalink to &quot;string-获取&quot;">​</a></h3><ul><li>⽅法 get，添加键对应的值，如果键存在则返回对应的值，如果键不存在则返回 None</li><li>编写代码如下</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #创建 StrictRedis 对象，与 redis 服务器建⽴连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StrictRedis()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #获取键 name 的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sr.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #输出键的值，如果键不存在则返回 None</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span></code></pre></div><h3 id="string-修改" tabindex="-1">string-修改 <a class="header-anchor" href="#string-修改" aria-label="Permalink to &quot;string-修改&quot;">​</a></h3><ul><li>⽅法 set，如果键已经存在则进⾏修改，如果键不存在则进⾏添加</li><li>编写代码如下</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #创建 StrictRedis 对象，与 redis 服务器建⽴连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StrictRedis()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #设置键 name 的值，如果键已经存在则进⾏修改，如果键不存在则进⾏添加</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sr.set(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;itcast&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #输出响应结果，如果操作成功则返回 True，否则返回 False</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span></code></pre></div><h3 id="string-删除" tabindex="-1">string-删除 <a class="header-anchor" href="#string-删除" aria-label="Permalink to &quot;string-删除&quot;">​</a></h3><ul><li>⽅法 delete，删除键及对应的值，如果删除成功则返回受影响的键数，否则则返 回 0</li><li>编写代码如下</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #创建 StrictRedis 对象，与 redis 服务器建⽴连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StrictRedis()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #设置键 name 的值，如果键已经存在则进⾏修改，如果键不存在则进⾏添加</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sr.delete(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #输出响应结果，如果删除成功则返回受影响的键数，否则则返回 0</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span></code></pre></div><h3 id="获取键" tabindex="-1">获取键 <a class="header-anchor" href="#获取键" aria-label="Permalink to &quot;获取键&quot;">​</a></h3><ul><li>⽅法 keys，根据正则表达式获取键</li><li>编写代码如下</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #创建 StrictRedis 对象，与 redis 服务器建⽴连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StrictRedis()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #获取所有的键</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sr.keys()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        #输出响应结果，所有的键构成⼀个列表，如果没有键则返回空列表</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span></code></pre></div><h2 id="主从" tabindex="-1">主从 <a class="header-anchor" href="#主从" aria-label="Permalink to &quot;主从&quot;">​</a></h2><ul><li><p>⼀个 master 可以拥有多个 slave，⼀个 slave⼜可以拥有多个 slave，如此下去，形成了强⼤的多级服务器集群架构</p></li><li><p>master 用来写数据，slave 用来读数据，经统计：网站的读写比率是 10:1</p></li><li><p>通过主从配置可以实现读写分离</p><p><img src="https://oss.justin3go.com/blogs/p1_5.png" alt="img"></p></li><li><p>master 和 slave 都是一个 redis 实例(redis 服务)</p></li></ul><h3 id="主从配置" tabindex="-1">主从配置 <a class="header-anchor" href="#主从配置" aria-label="Permalink to &quot;主从配置&quot;">​</a></h3><h5 id="配置主" tabindex="-1">配置主 <a class="header-anchor" href="#配置主" aria-label="Permalink to &quot;配置主&quot;">​</a></h5><ul><li><p>查看当前主机的 ip 地址</p><blockquote><p>ifconfig</p></blockquote><p><img src="https://oss.justin3go.com/blogs/p1_10.png" alt="ifconfig"></p></li><li><p>修改 etc/redis/redis.conf 文件</p><blockquote><p>sudo vi redis.conf bind 192.168.26.128</p></blockquote></li><li><p>重启 redis 服务</p><blockquote><p>sudo service redis stop sudo redis-server redis.conf</p></blockquote></li></ul><h5 id="配置从" tabindex="-1">配置从 <a class="header-anchor" href="#配置从" aria-label="Permalink to &quot;配置从&quot;">​</a></h5><ul><li><p>复制 etc/redis/redis.conf 文件</p><blockquote><p>sudo cp redis.conf ./slave.conf</p></blockquote></li><li><p>修改 redis/slave.conf 文件</p><blockquote><p>sudo vi slave.conf</p></blockquote></li><li><p>编辑内容</p><blockquote><p>bind 192.168.26.128 slaveof 192.168.26.128 6379 port 6378</p></blockquote></li><li><p>redis 服务</p><blockquote><p>sudo redis-server slave.conf</p></blockquote></li><li><p>查看主从关系</p><blockquote><p>redis-cli -h 192.168.26.128 info Replication</p></blockquote><p><img src="https://oss.justin3go.com/blogs/p1_9.png" alt="主从关系"></p></li></ul><h3 id="数据操作" tabindex="-1">数据操作 <a class="header-anchor" href="#数据操作" aria-label="Permalink to &quot;数据操作&quot;">​</a></h3><ul><li><p>在 master 和 slave 分别执⾏info 命令，查看输出信息 进入主客户端</p><blockquote><p>redis-cli -h 192.168.26.128 -p 6379</p></blockquote></li><li><p>进入从的客户端</p><blockquote><p>redis-cli -h 192.168.26.128 -p 6378</p></blockquote></li><li><p>在 master 上写数据</p><blockquote><p>set aa aa</p></blockquote><p><img src="https://oss.justin3go.com/blogs/p1_56.png" alt="master 写数据"></p></li><li><p>在 slave 上读数据</p><blockquote><p>get aa</p></blockquote></li></ul><h2 id="集群" tabindex="-1">集群 <a class="header-anchor" href="#集群" aria-label="Permalink to &quot;集群&quot;">​</a></h2><ul><li>之前我们已经讲了主从的概念，一主可以多从，如果同时的访问量过大(1000w),主服务肯定就会挂掉，数据服务就挂掉了或者发生自然灾难</li><li>大公司都会有很多的服务器(华东地区、华南地区、华中地区、华北地区、西北地区、西南地区、东北地区、台港澳地区机房)</li></ul><h3 id="集群的概念" tabindex="-1">集群的概念 <a class="header-anchor" href="#集群的概念" aria-label="Permalink to &quot;集群的概念&quot;">​</a></h3><ul><li>集群是一组相互独立的、通过高速网络互联的计算机，它们构成了一个组，并以单一系统的模式加以管理。一个客户与集群相互作用时，集群像是一个独立的服务器。集群配置是用于提高可用性和可缩放性。 <img src="https://oss.justin3go.com/blogs/p1_58.png" alt="集群"></li></ul><p>当请求到来首先由负载均衡服务器处理，把请求转发到另外的一台服务器上。</p><h3 id="redis-集群" tabindex="-1">redis 集群 <a class="header-anchor" href="#redis-集群" aria-label="Permalink to &quot;redis 集群&quot;">​</a></h3><ul><li>分类 <ul><li>软件层面</li><li>硬件层面</li></ul></li><li>软件层面：只有一台电脑，在这一台电脑上启动了多个 redis 服务。</li></ul><p><img src="https://oss.justin3go.com/blogs/p1_7.png" alt="软件层面"></p><ul><li>硬件层面：存在多台实体的电脑，每台电脑上都启动了一个 redis 或者多个 redis 服务。</li></ul><p><img src="https://oss.justin3go.com/blogs/p1_6.png" alt="硬件层面"></p><h3 id="搭建集群" tabindex="-1">搭建集群 <a class="header-anchor" href="#搭建集群" aria-label="Permalink to &quot;搭建集群&quot;">​</a></h3><ul><li>当前拥有两台主机 172.16.179.130、172.16.179.131，这⾥的 IP 在使⽤时要改为实际值</li></ul><h3 id="参考阅读" tabindex="-1">参考阅读 <a class="header-anchor" href="#参考阅读" aria-label="Permalink to &quot;参考阅读&quot;">​</a></h3><ul><li>redis 集群搭建 <a href="http://www.cnblogs.com/wuxl360/p/5920330.html" target="_blank" rel="noreferrer">http://www.cnblogs.com/wuxl360/p/5920330.html</a></li><li>[Python]搭建 redis 集群 <a href="http://blog.5ibc.net/p/51020.html" target="_blank" rel="noreferrer">http://blog.5ibc.net/p/51020.html</a></li></ul><h3 id="配置机器-1" tabindex="-1">配置机器 1 <a class="header-anchor" href="#配置机器-1" aria-label="Permalink to &quot;配置机器 1&quot;">​</a></h3><ul><li><p>在演示中，172.16.179.130 为当前 ubuntu 机器的 ip</p></li><li><p>在 172.16.179.130 上进⼊Desktop⽬录，创建 conf⽬录</p></li><li><p>在 conf⽬录下创建⽂件 7000.conf，编辑内容如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>port 7000</span></span>
<span class="line"><span>bind 172.16.179.130</span></span>
<span class="line"><span>daemonize yes</span></span>
<span class="line"><span>pidfile 7000.pid</span></span>
<span class="line"><span>cluster-enabled yes</span></span>
<span class="line"><span>cluster-config-file 7000_node.conf</span></span>
<span class="line"><span>cluster-node-timeout 15000</span></span>
<span class="line"><span>appendonly yes</span></span></code></pre></div></li><li><p>在 conf⽬录下创建⽂件 7001.conf，编辑内容如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>port 7001</span></span>
<span class="line"><span>bind 172.16.179.130</span></span>
<span class="line"><span>daemonize yes</span></span>
<span class="line"><span>pidfile 7001.pid</span></span>
<span class="line"><span>cluster-enabled yes</span></span>
<span class="line"><span>cluster-config-file 7001_node.conf</span></span>
<span class="line"><span>cluster-node-timeout 15000</span></span>
<span class="line"><span>appendonly yes</span></span></code></pre></div></li><li><p>在 conf⽬录下创建⽂件 7002.conf，编辑内容如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>port 7002</span></span>
<span class="line"><span>bind 172.16.179.130</span></span>
<span class="line"><span>daemonize yes</span></span>
<span class="line"><span>pidfile 7002.pid</span></span>
<span class="line"><span>cluster-enabled yes</span></span>
<span class="line"><span>cluster-config-file 7002_node.conf</span></span>
<span class="line"><span>cluster-node-timeout 15000</span></span>
<span class="line"><span>appendonly yes</span></span></code></pre></div></li><li><p>总结：三个⽂件的配置区别在 port、pidfile、cluster-config-file 三项</p></li><li><p>使⽤配置⽂件启动 redis 服务</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>redis-server 7000.conf</span></span>
<span class="line"><span>redis-server 7001.conf</span></span>
<span class="line"><span>redis-server 7002.conf</span></span></code></pre></div></li><li><p>查看进程如下图 <img src="https://oss.justin3go.com/blogs/p1_59.png" alt="img"></p></li></ul><h3 id="配置机器-2" tabindex="-1">配置机器 2 <a class="header-anchor" href="#配置机器-2" aria-label="Permalink to &quot;配置机器 2&quot;">​</a></h3><ul><li><p>在演示中，172.16.179.131 为当前 ubuntu 机器的 ip</p></li><li><p>在 172.16.179.131 上进⼊Desktop⽬录，创建 conf⽬录</p></li><li><p>在 conf⽬录下创建⽂件 7003.conf，编辑内容如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>port 7003</span></span>
<span class="line"><span>bind 172.16.179.131</span></span>
<span class="line"><span>daemonize yes</span></span>
<span class="line"><span>pidfile 7003.pid</span></span>
<span class="line"><span>cluster-enabled yes</span></span>
<span class="line"><span>cluster-config-file 7003_node.conf</span></span>
<span class="line"><span>cluster-node-timeout 15000</span></span>
<span class="line"><span>appendonly yes</span></span></code></pre></div></li><li><p>在 conf⽬录下创建⽂件 7004.conf，编辑内容如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>port 7004</span></span>
<span class="line"><span>bind 172.16.179.131</span></span>
<span class="line"><span>daemonize yes</span></span>
<span class="line"><span>pidfile 7004.pid</span></span>
<span class="line"><span>cluster-enabled yes</span></span>
<span class="line"><span>cluster-config-file 7004_node.conf</span></span>
<span class="line"><span>cluster-node-timeout 15000</span></span>
<span class="line"><span>appendonly yes</span></span></code></pre></div></li><li><p>在 conf⽬录下创建⽂件 7005.conf，编辑内容如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>port 7005</span></span>
<span class="line"><span>bind 172.16.179.131</span></span>
<span class="line"><span>daemonize yes</span></span>
<span class="line"><span>pidfile 7005.pid</span></span>
<span class="line"><span>cluster-enabled yes</span></span>
<span class="line"><span>cluster-config-file 7005_node.conf</span></span>
<span class="line"><span>cluster-node-timeout 15000</span></span>
<span class="line"><span>appendonly yes</span></span></code></pre></div></li><li><p>总结：三个⽂件的配置区别在 port、pidfile、cluster-config-file 三项</p></li><li><p>使⽤配置⽂件启动 redis 服务</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>redis-server 7003.conf</span></span>
<span class="line"><span>redis-server 7004.conf</span></span>
<span class="line"><span>redis-server 7005.conf</span></span></code></pre></div></li><li><p>查看进程如下图 <img src="https://oss.justin3go.com/blogs/p1_60.png" alt="进程"></p></li></ul><h3 id="创建集群" tabindex="-1">创建集群 <a class="header-anchor" href="#创建集群" aria-label="Permalink to &quot;创建集群&quot;">​</a></h3><ul><li><p>redis 的安装包中包含了 redis-trib.rb，⽤于创建集群</p></li><li><p>接下来的操作在 172.16.179.130 机器上进⾏</p></li><li><p>将命令复制，这样可以在任何⽬录下调⽤此命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo cp /usr/share/doc/redis-tools/examples/redis-trib.rb /usr/local/bin/</span></span></code></pre></div></li><li><p>安装 ruby 环境，因为 redis-trib.rb 是⽤ruby 开发的</p><blockquote><p>sudo apt-get install ruby</p></blockquote></li><li><p>在提示信息处输⼊y，然后回⻋继续安装 <img src="https://oss.justin3go.com/blogs/p1_61.png" alt="安装"></p></li><li><p>运⾏如下命令创建集群</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>redis-trib.rb create --replicas 1 172.16.179.130:7000 172.16.179.130:7001 172.16.179.130:7002 172.16.179.131:7003 172.16.179.131:7004 172.16.179.131:7005</span></span></code></pre></div></li><li><p>执⾏上⾯这个指令在某些机器上可能会报错,主要原因是由于安装的 ruby 不是最 新版本!</p></li><li><p>天朝的防⽕墙导致⽆法下载最新版本,所以需要设置 gem 的源</p></li><li><p>解决办法如下</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 先查看⾃⼰的 gem 源是什么地址</span></span>
<span class="line"><span>gem source -l -- 如果是 https://rubygems.org/ 就需要更换</span></span>
<span class="line"><span>-- 更换指令为</span></span>
<span class="line"><span>gem sources --add https://gems.ruby-china.org/ --remove https://rubygems.org/</span></span>
<span class="line"><span>-- 通过 gem 安装 redis 的相关依赖</span></span>
<span class="line"><span>sudo gem install redis</span></span>
<span class="line"><span>-- 然后重新执⾏指令</span></span></code></pre></div><p><img src="https://oss.justin3go.com/blogs/p1_64.png" alt="安装"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>redis-trib.rb create --replicas 1 172.16.179.130:7000 172.16.179.130:7001 172.16.179.130:7002 172.16.179.131:7003 172.16.179.131:7004 172.16.179.131:7005</span></span></code></pre></div></li><li><p>提示如下主从信息，输⼊yes 后回⻋ <img src="https://oss.justin3go.com/blogs/p1_62.png" alt="主从"></p></li><li><p>提示完成，集群搭建成功</p></li></ul><h3 id="数据验证" tabindex="-1">数据验证 <a class="header-anchor" href="#数据验证" aria-label="Permalink to &quot;数据验证&quot;">​</a></h3><ul><li><p>根据上图可以看出，当前搭建的主服务器为 7000、7001、7003，对应的从服务器是 7004、7005、7002</p></li><li><p>在 172.16.179.131 机器上连接 7002，加参数-c 表示连接到集群</p><blockquote><p>redis-cli -h 172.16.179.131 -c -p 7002</p></blockquote></li><li><p>写⼊数据</p><blockquote><p>set name itheima</p></blockquote></li><li><p>⾃动跳到了 7003 服务器，并写⼊数据成功</p></li><li><p><img src="https://oss.justin3go.com/blogs/p1_65.png" alt=""></p></li><li><p>在 7003 可以获取数据，如果写入数据又重定向到 7000(负载均衡)</p></li><li><p><img src="https://oss.justin3go.com/blogs/p1_66.png" alt="p1_66"></p></li></ul><h3 id="在哪个服务器上写数据-crc16" tabindex="-1">在哪个服务器上写数据：CRC16 <a class="header-anchor" href="#在哪个服务器上写数据-crc16" aria-label="Permalink to &quot;在哪个服务器上写数据：CRC16&quot;">​</a></h3><ul><li>redis cluster 在设计的时候，就考虑到了去中⼼化，去中间件，也就是说，集群中 的每个节点都是平等的关系，都是对等的，每个节点都保存各⾃的数据和整个集 群的状态。每个节点都和其他所有节点连接，⽽且这些连接保持活跃，这样就保 证了我们只需要连接集群中的任意⼀个节点，就可以获取到其他节点的数据</li><li>Redis 集群没有并使⽤传统的⼀致性哈希来分配数据，⽽是采⽤另外⼀种叫做哈希 槽 (hash slot)的⽅式来分配的。redis cluster 默认分配了 16384 个 slot，当我们 set⼀个 key 时，会⽤CRC16 算法来取模得到所属的 slot，然后将这个 key 分到哈 希槽区间的节点上，具体算法就是：CRC16(key) % 16384。所以我们在测试的 时候看到 set 和 get 的时候，直接跳转到了 7000 端⼝的节点</li><li>Redis 集群会把数据存在⼀个 master 节点，然后在这个 master 和其对应的 salve 之间进⾏数据同步。当读取数据时，也根据⼀致性哈希算法到对应的 master 节 点获取数据。只有当⼀个 master 挂掉之后，才会启动⼀个对应的 salve 节点，充 当 master</li><li>需要注意的是：必须要 3 个或以上的主节点，否则在创建集群时会失败，并且当存 活的主节点数⼩于总节点数的⼀半时，整个集群就⽆法提供服务了</li></ul><h3 id="python-交互-1" tabindex="-1">Python 交互 <a class="header-anchor" href="#python-交互-1" aria-label="Permalink to &quot;Python 交互&quot;">​</a></h3><ul><li><p>安装包如下</p><blockquote><p>pip install redis-py-cluster</p></blockquote></li><li><p>redis-py-cluster 源码地址 <a href="https://github.com/Grokzen/redis-py-cluster" target="_blank" rel="noreferrer">https://github.com/Grokzen/redis-py-cluster</a></p></li><li><p>创建⽂件 redis_cluster.py，示例码如下</p></li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rediscluster </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 构建所有的节点，Redis 会使⽤CRC16 算法，将键和值写到某个节点上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    startup_nodes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;host&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;192.168.26.128&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;port&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;7000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;host&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;192.168.26.130&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;port&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;7003&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;host&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;192.168.26.128&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;port&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;7001&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 构建 RedisCluster 对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RedisCluster(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">startup_nodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">startup_nodes,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">decode_responses</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 设置键为 name、值为 itheima 的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">src.set(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;itheima&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 获取键为 name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src.get(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  except</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Exception</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span></code></pre></div>`,78)]))}const g=i(p,[["render",e]]);export{c as __pageData,g as default};
