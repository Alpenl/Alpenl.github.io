import{_ as s,D as a,B as t,ah as i}from"./chunks/framework.kYnPRA0Y.js";const E=JSON.parse('{"title":"Vue3 其他","description":"","frontmatter":{},"headers":[],"relativePath":"notes/Vue相关/06Vue3其他.md","filePath":"notes/Vue相关/06Vue3其他.md","lastUpdated":1738325247000}'),e={name:"notes/Vue相关/06Vue3其他.md"},p=i(`<h1 id="vue3-其他" tabindex="-1">Vue3 其他 <a class="header-anchor" href="#vue3-其他" aria-label="Permalink to &quot;Vue3 其他&quot;">​</a></h1><h2 id="composition-api" tabindex="-1">Composition API <a class="header-anchor" href="#composition-api" aria-label="Permalink to &quot;Composition API&quot;">​</a></h2><img src="https://oss.justin3go.com/blogs/image-20220201200822117.png" alt="image-20220201200822117" style="zoom:50%;"><p>引入 setup 钩子的原因是为了让其和 option API 并肩工作，其中的 return 也会暴露在 this 上</p><h3 id="它和-beforecreate-和-create-有什么关系" tabindex="-1">它和 beforeCreate 和 create 有什么关系？ <a class="header-anchor" href="#它和-beforecreate-和-create-有什么关系" aria-label="Permalink to &quot;它和 beforeCreate 和 create 有什么关系？&quot;">​</a></h3><p>答：Setup 将是新的一个调用的钩子，甚至在 beforeCreate 之前，它是在整个生命周期图的最前面，最顶部。</p><p>在 setup 中，需要注意的是你是没有权限访问 this，这是故意的，因为大部分的暴露在 this 上的功能你也可以使用组合式 API 函数做到，所以 setuo 内部并没有太多 this 的用例，另外，因为它是在所有事情之前调用的，比如你有的 data 和 components，这些都是在 setup 后处理的</p><h3 id="watch-与-watcheffect-函数有什么区别" tabindex="-1">watch 与 watchEffect 函数有什么区别？ <a class="header-anchor" href="#watch-与-watcheffect-函数有什么区别" aria-label="Permalink to &quot;watch 与 watchEffect 函数有什么区别？&quot;">​</a></h3><p>watchEffect 直接获取一个函数，它会立即运行它，并且只要有任何变化就重新运行；</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watchEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.count)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>watch 的不同在于，你需要先定义一个源，源可以是返回某些内容的函数，然后你有一个回调函数，回调接收一个 count 和 oldCount，这和 Vue2 的 API 完全一样</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state.count, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>watch 你得更明确地说明什么会触发回调再次运行，有时你可能会在一个回调内依赖另一个属性因为这是在回调内部地访问，它不会真正被跟踪为依赖项</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">watch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state.count, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    state.anotherProperty</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>你可能正在执行一些复杂的计算，如果计算的结果最终是相同的值，则不会调用第二个参数的回调</p><p>然而，在这种情况下&lt;watchEffect 函数中&gt;，没有像中间值之类的给你说这个值是否改变了，所以在这个过程中它访问的任何东西将触发整个 effect 重新运行</p><p>watch 的另外一个好处就是你可以得到旧的值</p><p>上述 watch 的第一个参数可以直接写响应式值&lt;之所以不写 state.count，因为检测一个数字是没有任何意义的&gt;：</p><img src="https://oss.justin3go.com/blogs/image-20220201203836485.png" alt="image-20220201203836485" style="zoom:80%;"><p>watch 只有其中一个发生变化时才调用，而 watchEffect 不能是懒惰的，因为你必须预先收集依赖关系</p><p>但是尤其是在合成 API 中，watchEffect 可以更直接用于很多用例，比如数据获取，假如我们有一个用例在那里你想要获取一些关于组件创建的数据，所以我们应该在创建组件的时候获取它，如果某个 prop 改变了，我们需要根据那个 prop 重新获取数据</p><p>这是本来要做的：</p><img src="https://oss.justin3go.com/blogs/image-20220201204447784.png" alt="image-20220201204447784" style="zoom:80%;"><p>这是使用了 watchEffect 之后的</p><img src="https://oss.justin3go.com/blogs/image-20220201204556113.png" alt="image-20220201204556113" style="zoom:80%;"><p>因为整个操作都依赖于 props.id，每当来的 props 改变时就会导致它重新运行</p><p>注：对于 setup 中传入的 props，它是一个响应式对象，会自动为你更新，你不应该修改它，修改它也会得到一个警告。</p><h3 id="onmounted" tabindex="-1">onMounted <a class="header-anchor" href="#onmounted" aria-label="Permalink to &quot;onMounted&quot;">​</a></h3><p>从某种意义上说，我们是在调用 onMounted()，就像一个全局 API，它只是神奇地知道与哪个组件关联，原因是，当你这么做的时候，意味着你可以提取这个到一个外部函数，不需要再传入额外的参数，然后再在内部可以调用它，使得抽象变得非常容易：</p><img src="https://oss.justin3go.com/blogs/image-20220201205605039.png" alt="image-20220201205605039" style="zoom:80%;"><h2 id="代码组织" tabindex="-1">代码组织 <a class="header-anchor" href="#代码组织" aria-label="Permalink to &quot;代码组织&quot;">​</a></h2><p>引入组合式 API 的其他好处</p><p>比如之前的，setup 内部的函数可以提取到外部进行使用</p><img src="https://oss.justin3go.com/blogs/image-20220201210350482.png" alt="image-20220201210350482" style="zoom:67%;"><img src="https://oss.justin3go.com/blogs/image-20220201210822854.png" alt="image-20220201210822854" style="zoom:67%;">`,35),n=[p];function h(o,l,c,r,k,d){return t(),a("div",null,n)}const u=s(e,[["render",h]]);export{E as __pageData,u as default};
