import{_ as s,D as i,B as a,ah as n}from"./chunks/framework.kYnPRA0Y.js";const c=JSON.parse('{"title":"纹理映射","description":"","frontmatter":{},"headers":[],"relativePath":"notes/threejs入门/06纹理映射.md","filePath":"notes/threejs入门/06纹理映射.md","lastUpdated":1738327344000}'),e={name:"notes/threejs入门/06纹理映射.md"},t=n(`<h1 id="纹理映射" tabindex="-1">纹理映射 <a class="header-anchor" href="#纹理映射" aria-label="Permalink to &quot;纹理映射&quot;">​</a></h1><blockquote><p>此笔记记录于<a href="https://discoverthreejs.com/" target="_blank" rel="noreferrer">DISCOVER three.js</a>，大多数为其中的摘要，少数为笔者自己的理解</p></blockquote><h2 id="基本知识" tabindex="-1">基本知识 <a class="header-anchor" href="#基本知识" aria-label="Permalink to &quot;基本知识&quot;">​</a></h2><p>用最简单的术语来说，纹理映射意味着拿着图像并将其拉伸到 3D 对象的表面上。我们将以这种方式使用的图像称为<strong>纹理</strong>，我们可以使用纹理来表示颜色、粗糙度和不透明度等材料属性。例如，要更改几何区域的颜色，我们更改位于顶部的纹理区域的颜色，就像您在上图中看到的附加到面部模型的颜色纹理一样。</p><p>虽然获取 2D 纹理并将其拉伸到像立方体这样的规则形状上很容易，但对于像脸这样的不规则几何形状则要做到这一点要困难得多，而且多年来，已经开发了许多纹理映射技术。也许最简单的技术是 <a href="https://en.wikipedia.org/wiki/Projective_texture_mapping" target="_blank" rel="noreferrer">投影映射</a>，它将纹理投影到一个对象（或场景）上，就好像它已经通过电影放映机照射了一样。想象一下，将您的手放在电影放映机前，并看到投影到您皮肤上的图像。</p><p>虽然投影映射和其他技术仍然广泛用于创建阴影（或模拟投影仪）等事情，但这不适用于将面部的颜色纹理附加到面部几何体。相反，我们使用一种称为 <a href="https://en.wikipedia.org/wiki/UV_mapping" target="_blank" rel="noreferrer"><strong>UV 映射</strong></a>的技术，它允许我们在几何体上的点和脸上的点之间创建连接。</p><p>表示 UV 映射的数据存储在几何体上。像<code>BoxBufferGeometry</code>这样的 three.js 几何体已经设置了 UV 映射，并且在大多数情况下，当您加载在外部程序中创建的面部模型时，它也有已准备好的 UV 映射供使用。</p><h2 id="纹理类型" tabindex="-1">纹理类型 <a class="header-anchor" href="#纹理类型" aria-label="Permalink to &quot;纹理类型&quot;">​</a></h2><p><em><strong>uv-test-bw.png</strong></em> 是一个以 PNG 格式存储的普通 2D 图像文件，我们将使用<code>TextureLoader</code>加载它，这将返回 <a href="https://threejs.org/docs/#api/en/textures/Texture" target="_blank" rel="noreferrer"><code>Texture</code></a>类的一个实例。您可以以相同的方式使用浏览器支持的任何图像格式，例如 PNG、JPG、GIF、BMP。这是我们将遇到的最常见和最简单的纹理类型：存储在简单 2D 图像文件中的数据。</p><p><img src="https://oss.justin3go.com/blogs/uv-test-bw.png" alt=""></p><p>还有一些专用图像格式的加载器，如 HDR、EXR 和 TGA，它们具有相应的加载器，如 <a href="https://threejs.org/docs/#examples/en/loaders/TGALoader" target="_blank" rel="noreferrer"><code>TGALoader</code></a>。同样，一旦加载，我们将获得一个<code>Texture</code>实例，我们可以以与加载的 PNG 或 JPG 图像大致相同的方式使用它。</p><p>除此之外，three.js 还支持许多其他类型的非简单 2D 图像的纹理，例如 <a href="https://threejs.org/examples/?q=video#webgl_materials_video" target="_blank" rel="noreferrer"><strong>视频纹理</strong></a>、 <a href="https://threejs.org/examples/#webgl2_volume_instancing" target="_blank" rel="noreferrer"><strong>3D 纹理</strong></a>、 <a href="https://threejs.org/examples/#webgl_materials_texture_canvas" target="_blank" rel="noreferrer"><strong>画布纹理</strong></a>、 <a href="https://threejs.org/examples/?q=texture#webgl_loader_texture_basis" target="_blank" rel="noreferrer"><strong>压缩纹理</strong></a>、 <a href="https://threejs.org/examples/?q=cubemap#webgl_materials_cubemap_dynamic" target="_blank" rel="noreferrer"><strong>立方体纹理</strong></a>、 <a href="https://threejs.org/examples/?q=equirectangular#webgl_panorama_equirectangular" target="_blank" rel="noreferrer"><strong>矩形纹理</strong></a>等等。</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020231218134800.png" alt=""></p><p>上图中，纹理的左上角已经映射到立方体角上的一个顶点坐标(−1,1,1)：</p><p>(0,1)⟶(−1,1,1)</p><p>对立方体的其他五个面进行了类似的映射，从而在立方体的六个面上分别生成一个完整的纹理副本：</p><p><img src="https://oss.justin3go.com/blogs/Pasted%20image%2020231218134839.png" alt=""></p><h2 id="cube-js" tabindex="-1">cube.js <a class="header-anchor" href="#cube-js" aria-label="Permalink to &quot;cube.js&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  BoxBufferGeometry,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MathUtils,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Mesh,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  MeshStandardMaterial,</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  TextureLoader, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;three&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createMaterial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // create a texture loader.</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> textureLoader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextureLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span></span>

<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // load a texture</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> texture</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> textureLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span></span>
<span class="line diff add"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;/assets/textures/uv-test-bw.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ); </span></span>
<span class="line"></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // create a &quot;standard&quot; material using</span></span>
<span class="line diff add"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // the texture we just loaded as a color map</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> material</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MeshStandardMaterial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    map: texture, </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }); </span></span>
<span class="line"></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> material; </span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCube</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> geometry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BoxBufferGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line diff add"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> material</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createMaterial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cube</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry, material);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cube.rotation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> radiansPerSecond</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MathUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">degToRad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cube.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">delta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // increase the cube&#39;s rotation each frame</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cube.rotation.z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radiansPerSecond;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cube.rotation.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radiansPerSecond;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cube.rotation.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> delta </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radiansPerSecond;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cube;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createCube };</span></span></code></pre></div>`,19),h=[t];function l(p,k,r,d,E,g){return a(),i("div",null,h)}const y=s(e,[["render",l]]);export{c as __pageData,y as default};
